<?php
/**
 * @file
 *  Features export for all permissions per role.
 */

/**
 * Implements hook_features_api().
 */
function features_user_role_plus_features_api() {
  $components['user_role_plus'] = array(
    'name' => t('Roles and permissions'),
    'default_hook' => 'user_default_roles_plus',
    'feature_source' => TRUE
  );
  return $components;
}

/**
 * Implements hook_features_export().
 */
function user_role_plus_features_export($data, &$export, $module_name = '') {
  $export['dependencies']['features_user_role_plus'] = 'features_user_role_plus';
  $map = features_get_default_map('user_role_plus', 'name');
  $modules = user_permission_get_modules();
  foreach ($data as $role) {
    // Role is provided by another module. Add dependency.
    if (isset($map[$role]) && $map[$role] != $module_name) {
      $export['dependencies'][$map[$role]] = $map[$role];
    }
    // Export.
    elseif ($role_by_name = user_role_load_by_name($role)) {
      $role_permissions = user_role_permissions(array(
        $role_by_name->rid => $role_by_name->name
      ));
      $role_permissions = reset($role_permissions);
      foreach ($role_permissions as $permission => $value) {
        if (isset($modules[$permission])) {
          $export['dependencies'][$modules[$permission]] = $modules[$permission];
        }
      }
      $export['features']['user_role_plus'][$role] = $role;
    }
  }
  return array();
}

/**
 * Implements hook_features_export_options().
 */
function user_role_plus_features_export_options() {
  return drupal_map_assoc(_user_features_get_roles(TRUE));
}

/**
 * Implements hook_features_export_render().
 */
function user_role_plus_features_export_render($module, $data) {
  $code = array();
  $code[] = '  $roles = array();';
  $code[] = '';
  $modules = user_permission_get_modules();

  foreach ($data as $name ) {
    if ($role = user_role_load_by_name($name)) {
      $role_permissions = user_role_permissions(array(
        $role->rid => $role->name
      ));
      $role->permissions = reset($role_permissions);
      foreach ($role->permissions as $perm => $state) {
        if (!isset($modules[$perm])) {
          unset($role->permissions[$perm]);
          $args = array('%name' => $perm, '%module' => $module,);
          $msg = t('No module defines the permission %name. In default-mode force a feature-revert. In overriden-mode export the feature.', $args);
          drupal_set_message($msg, 'warning', FALSE);
        }
      }
      unset($role->rid);
      $role_identifier = features_var_export($name);
      $role_export = features_var_export($role, '  ');
      $code[] = "  // Exported role: {$name}";
      $code[] = "  \$roles[{$role_identifier}] = {$role_export};";
      $code[] = "";
    }
  }

  $code[] = '  return $roles;';
  $code = implode("\n", $code);
  return array(
    'user_default_roles_plus' => $code
  );
}

/**
 * Implements hook_features_revert().
 */
function user_role_plus_features_revert($module) {
  user_role_plus_features_rebuild($module);
}

/**
 * Implements hook_features_rebuild().
 */
function user_role_plus_features_rebuild($module) {
  if ($defaults = features_get_default('user_role_plus', $module)) {
    $modules = user_permission_get_modules();
    $clear_stale_permissions = variable_get('features_user_role_plus_clear_stale_permissions', FALSE);
    foreach ($defaults as $role ) {
      $role = (object) $role;
      if ($existing = user_role_load_by_name($role->name)) {
        $role->rid = $existing->rid;
      }
      user_role_save($role);

      $role_permissions = user_role_permissions(array(
        $role->rid => $role->name
      ));
      $existing = reset($role_permissions);
      $permissions = array_merge($existing, $role->permissions);
      foreach ($permissions as $permission => $value ) {
        if (!empty($modules[$permission])) {
          $permissions[$permission] = !empty($role->permissions[$permission]);
          continue;
        }
        if ($clear_stale_permissions) {
          $permissions[$permission] = FALSE;
          continue;
        }
        unset($permissions[$permission]);
        $args = array('%name' => $permission, '%module' => $module,);
        $msg = t('Warning in features rebuild of %module. No module defines the permission %name.', $args);
        drupal_set_message($msg, 'warning', FALSE);
      }
      user_role_change_permissions($role->rid, $permissions);
    }
  }
}
